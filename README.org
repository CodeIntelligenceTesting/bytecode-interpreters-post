A few basic bytecode interpreters used as example code in a series of articles. Given a recent GCC
all the interpreters can be compiled in one go using a supplied Makefile:

#+BEGIN_SRC shell
make all
make test
#+END_SRC

* What..?

Articles:

1. DIY bytecode interpreters ([[file:interpreter-p1.org][raw article in Russian]], [[https://habr.com/company/badoo/blog/425325/][published in Russian]])
2. The Flight of a Pig, or a bunch of fast PigletVM interpreters ([[file:interpreter-p2-pigletvm.org][raw article in Russian]], [[https://habr.com/company/badoo/blog/428878/][published in Russian]])

Bytecode interpreter examples contain:

1. [[file:interpreter-basic-switch.c][A trival switch interpreter]].
2. Immediate [[file:interpreter-immediate-arg.c][operand instruction example]].
3. [[file:interpreter-stack-machine.c][A stack vm]].
4. [[file:interpreter-register-machine.c][A register vm]].
5. A [[file:interpreter-regexp.c][regular expression matching machine]].
6. A set of various main loop implementations for [[file:pigletvm.h][PigletVM]]

* A trivial stack machine - PigletVM

PigletVM examples in PVM assembly:

1. A trivial [[file:test/sum.pvm][Sum of Numbers]]
2. Naive implementation of the [[file:test/sieve.pvm][Sieve of Eratosthenes]]

Apart from assembler there's a better way to write PigletVM programs. @true-grue somehow managed to
implement a proper language compiled into PigletmVM assembler: [[https://github.com/true-grue/PigletC][PigletC]]!

Compiling and running PigletVM assembler examples:

#+BEGIN_EXAMPLE
> # build all vms
> make all
> # Assemble the program and run it
> ./pigletvm asm test/sieve.pvm test/sieve.bin
> ./pigletvm run test/sieve.bin > /dev/null
PROFILE: switch code finished took 22ms
PROFILE: switch code (no range check) finished took 13ms
PROFILE: threaded code finished took 8ms
PROFILE: trace code finished took 4ms
> # Run the assembled program a number of times:
> ./pigletvm runtimes test/sieve.bin 100 > /dev/null
PROFILE: switch code finished took 445ms
PROFILE: switch code (no range check) finished took 398ms
PROFILE: threaded code finished took 485ms
PROFILE: trace code finished took 376ms
#+END_EXAMPLE
